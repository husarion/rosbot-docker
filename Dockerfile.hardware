ARG ROS_DISTRO=humble

## ============================ STM32FLASH =================================
# stm32flash needs an older version of glibc (2.28), which is why ubuntu 18.04 was used
FROM ubuntu:18.04 AS stm32flash_builder

# official releases are only for intel archs, so we need to build stm32flash from sources
RUN apt-get update && apt-get install -y \
		git \
		build-essential \
		cmake && \
	git clone https://github.com/stm32duino/stm32flash.git && \
	cd stm32flash/ && \
	make all

## =========================== STM32 firmware===============================
# FROM --platform=linux/amd64 ubuntu:18.04 as stm32_firmware_builder
# TODO: wget from releases instead
FROM --platform=linux/amd64 ubuntu:20.04 AS stm32_firmware_builder

ARG ROSBOT_FW_RELEASE=0.16.1

SHELL ["/bin/bash", "-c"]

# ENV PIO_VERSION="5.1.0"
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
		python3 \
		python3-pip \
		git \
		wget \
		cmake \
		tree

# https://docs.platformio.org/en/latest/core/installation.html#system-requirements
# RUN pip3 install -U platformio==${PIO_VERSION}
RUN pip3 install -U platformio colcon-common-extensions

RUN git clone https://github.com/husarion/rosbot-stm32-firmware.git && \
	mkdir -p ~/.platformio/packages/framework-mbed/features/ && \
	cp rosbot-stm32-firmware/.mbedignore ~/.platformio/packages/framework-mbed/features/.mbedignore

WORKDIR /rosbot-stm32-firmware

RUN	git checkout 012349115f6e863ad6fe8ca34cce76662b3acb6b && \
	git submodule update --init --recursive

# RUN wget https://github.com/husarion/rosbot-stm32-firmware/archive/refs/tags/${ROSBOT_FW_RELEASE}.tar.gz && \
# 	tar -xf *.tar.gz && \
# 	mv rosbot-stm32-firmware* rosbot-stm32-firmware && \
# 	mkdir -p ~/.platformio/packages/framework-mbed/features/ && \
# 	cp rosbot-stm32-firmware/.mbedignore ~/.platformio/packages/framework-mbed/features/.mbedignore

WORKDIR /rosbot-stm32-firmware

RUN export LC_ALL=C.UTF-8 && \
	export LANG=C.UTF-8 && \
	pio run

## =========================== ROS package builder ===============================

FROM ros:$ROS_DISTRO-ros-core AS pkg-builder

SHELL ["/bin/bash", "-c"]

RUN apt-get update && apt-get install -y \
		python3-pip \
		git \
		ros-$ROS_DISTRO-ros2-control \
		ros-$ROS_DISTRO-ros2-controllers \
		ros-$ROS_DISTRO-robot-localization \
		ros-$ROS_DISTRO-xacro \
		ros-$ROS_DISTRO-transmission-interface \
		ros-$ROS_DISTRO-robot-state-publisher && \
		pip install -U colcon-common-extensions && \
	# clear ubuntu packages
	apt-get clean && \
	rm -rf /var/lib/apt/lists/*


# clone robot github repositories
WORKDIR /ros2_ws
RUN mkdir -p /ros2_ws/src && cd

RUN git clone https://github.com/husarion/rosbot_ros.git --branch=humble && \
	cd rosbot_ros &&  \
	git checkout a49dc21211388c00bc8d1f3dfe383d75aeaa06dc && \
	git submodule update --init --recursive

WORKDIR /ros2_ws

# build ROS workspace
RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
	colcon build

## =========================== ROS image ===============================

FROM ros:$ROS_DISTRO-ros-core

SHELL ["/bin/bash", "-c"]

RUN apt-get update && apt-get install -y \
		python3-pip \
		ros-$ROS_DISTRO-ros2-control \
		ros-$ROS_DISTRO-ros2-controllers \
		ros-$ROS_DISTRO-robot-localization \
		ros-$ROS_DISTRO-xacro \
		ros-$ROS_DISTRO-transmission-interface \
		ros-$ROS_DISTRO-rmw-fastrtps-cpp \
		ros-$ROS_DISTRO-robot-state-publisher && \
		pip install sh python-periphery && \
	# clear ubuntu packages
	apt-get clean && \
	rm -rf /var/lib/apt/lists/*

# copy ROS package from previous step
COPY --from=pkg-builder /ros2_ws /ros2_ws

# copy firmware built in previous stage
COPY --from=stm32_firmware_builder /rosbot-stm32-firmware/.pio/build/core2/firmware.bin /root/firmware.bin
COPY --from=stm32flash_builder /stm32flash/stm32flash /usr/bin/stm32flash

# copy scripts
COPY ./flash-firmware.py /
COPY ./ros_entrypoint.sh /

RUN echo ". /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.bashrc && \
	echo ". /ros2_ws/install/setup.bash" >> ~/.bashrc && \
	# allows us to run: docker exec -it rosbot bash --login -c "rostopic list"
	echo ". /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.profile && \
	echo ". /ros2_ws/install/setup.bash" >> ~/.profile

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]