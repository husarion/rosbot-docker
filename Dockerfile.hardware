ARG ROS_DISTRO=humble
ARG PREFIX=

## =========================== Firmware CPU ID ================================

FROM ubuntu:20.04 AS cpu_id_builder

SHELL ["/bin/bash", "-c"]

# official releases are only for intel archs, so we need to build stm32flash from sources
RUN apt-get update && apt-get install -y \
        curl \
        python3 \
        python3-pip

# build a binary for reading the CPU ID
COPY read_cpu_id/ /read_cpu_id

RUN pip3 install -U platformio && \
    cd /read_cpu_id && \
    pio run && \
    chmod -x .pio/build/olimex_e407/firmware.bin

## =========================== Healthcheck builder ===============================

FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-base AS healthcheck_builder

ARG ROS_DISTRO
ARG PREFIX

SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws

RUN mkdir src && \
    cd src && \
    MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    source /opt/$MYDISTRO/$ROS_DISTRO/setup.bash && \
    # Create health check package
    ros2 pkg create healthcheck_pkg --build-type ament_cmake --dependencies rclcpp nav_msgs && \
    sed -i '/find_package(nav_msgs REQUIRED)/a \
        add_executable(healthcheck_node src/healthcheck.cpp)\n \
        ament_target_dependencies(healthcheck_node rclcpp nav_msgs)\n \
        install(TARGETS healthcheck_node DESTINATION lib/${PROJECT_NAME})' \
        /ros2_ws/src/healthcheck_pkg/CMakeLists.txt

COPY healthcheck.cpp src/healthcheck_pkg/src/

RUN MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    source /opt/$MYDISTRO/$ROS_DISTRO/setup.bash && \
    colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    rm -rf build log src

## =========================== ROS builder ===============================
FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-base AS ros_builder

ARG ROS_DISTRO
ARG PREFIX

SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws
RUN mkdir src

COPY ./healthcheck.cpp /

RUN apt-get update && apt-get install -y \
        python3-pip

RUN git clone --depth 1 -b humble https://github.com/husarion/rosbot_ros.git src && \
    vcs import src < src/rosbot/rosbot_hardware.repos && \
    cp -r src/ros2_controllers/diff_drive_controller src/ && \
    cp -r src/ros2_controllers/imu_sensor_broadcaster src/ && \
    rm -rf src/ros2_controllers && \
    # it is necessary to remove simulation - otherwise rosdep tries to install dependencies
    rm -r src/rosbot_gazebo && \
    # without this line (using vulcanexus base image) rosdep init throws error: "ERROR: default sources list file already exists:"
    rm -rf /etc/ros/rosdep/sources.list.d/20-default.list && \
    rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO && \
    rosdep install --from-paths src --ignore-src -y && \
    MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    source /opt/$MYDISTRO/$ROS_DISTRO/setup.bash && \
    colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release  && \
    rm -rf build log

## =========================== Final Stage ===============================
FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-core

ARG ROS_DISTRO
ARG PREFIX

SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws

COPY --from=ros_builder /ros2_ws /ros2_ws
COPY --from=healthcheck_builder /ros2_ws /ros2_ws_healthcheck

# for backward compatibility
RUN cp src/rosbot_utils/rosbot_utils/flash-firmware.py /usr/bin/ && \
    cp src/rosbot_utils/rosbot_utils/flash-firmware.py / && \
    cp install/rosbot_utils/share/rosbot_utils/firmware/firmware-*.bin /root/firmware.bin

RUN apt-get update && apt-get install -y \
        python3-pip \
        python3-rosdep \
        stm32flash \
        gosu \
        ros-$ROS_DISTRO-teleop-twist-keyboard && \
    pip3 install pyftdi && \
    rm -rf /etc/ros/rosdep/sources.list.d/20-default.list && \
    rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO && \
    rosdep install -i --from-path src --rosdistro $ROS_DISTRO -y && \
    # Save version
    echo $(cat /ros2_ws/src/rosbot/package.xml | grep '<version>' | sed -r 's/.*<version>([0-9]+.[0-9]+.[0-9]+)<\/version>/\1/g') >> /version.txt && \
    # Size optimalization
    apt-get remove -y \
        python3-rosdep \
        python3-pip && \
    apt-get clean && \
    rm -rf src && \
    rm -rf /var/lib/apt/lists/*

COPY --from=cpu_id_builder /read_cpu_id/.pio/build/olimex_e407/firmware.bin /firmware_read_cpu_id.bin

COPY ros_entrypoint.sh /
COPY vulcanexus_entrypoint.sh /
COPY healthcheck.sh /

COPY print-serial-number.py /usr/bin/

ENV ROS_NAMESPACE=

HEALTHCHECK --interval=5s --timeout=2s  --start-period=10s --retries=6 \
    CMD ["/healthcheck.sh"]

RUN new_content1='source "/ros2_ws_healthcheck/install/setup.bash"' && \
    new_content2='gosu $USER bash -c "ros2 run healthcheck_pkg healthcheck_node &"' && \
    sed -i "/exec/i $new_content1" /ros_entrypoint.sh && \
    sed -i "/exec/i $new_content2" /ros_entrypoint.sh
